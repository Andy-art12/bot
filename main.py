import asyncio
import requests


import logging #–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–ª–∞–¥–∫–∏)

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties  #—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π HTML
from aiogram.filters import Command
import core.handlers.basic

#—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
from dotenv import load_dotenv
import os

from core.keyboards.basic_kb import first_kb

import core.handlers.grades.grade7
import core.handlers.grades.grade8
import core.handlers.grades.grade9
import core.handlers.grades.grade10
import core.handlers.grades.grade11
#–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
token = os.getenv('TOKEN')
admin_id = os.getenv('ADMIN_ID')
url = f"https://api.telegram.org/bot{token}/deleteWebhook"
response = requests.get(url)
print(response.json())

#–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞
async def start_bot(bot: Bot):
    await bot.send_message(admin_id, f'start bot')



async def link(m: Message, bot: Bot):
    await bot.send_message(m.from_user.id, f'https://aliexpress.ru/', reply_markup=first_kb())
async def link_gdz(m: Message, bot: Bot):
    await bot.send_message(m.from_user.id, f'üìö')
    await bot.send_message(m.from_user.id, f'https://gdz.ru/', reply_markup=first_kb())


async def start():
    # logging.basicConfig(level=logging.INFO) #—Ä–∞–∑–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–ø–¥–∫–∏
    bot = Bot(token=token, default=DefaultBotProperties(parse_mode='HTML'))

    #–û–±—å—è–≤–ª–µ–Ω–∏—è –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
    dp = Dispatcher()

    #===========DP REGISTERS======================
    dp.startup.register(start_bot)

    dp.message.register(core.handlers.basic.get_start, Command(commands='start'))
    dp.message.register(core.handlers.basic.get_start, F.text == '–≥–ª–∞–≤–Ω–∞—è üè†')
    dp.message.register(core.handlers.basic.get_help, Command(commands='help'))

    dp.callback_query.register(core.handlers.grades.grade7.choise_topic_7, F.data.startswith('7grade'))
    dp.callback_query.register(core.handlers.grades.grade8.choise_topic_8, F.data.startswith('8grade'))
    dp.callback_query.register(core.handlers.grades.grade9.choise_topic_9, F.data.startswith('9grade'))
    dp.callback_query.register(core.handlers.grades.grade10.choise_topic_10, F.data.startswith('10grade'))
    dp.callback_query.register(core.handlers.grades.grade11.choise_topic_11, F.data.startswith('11grade'))

    dp.callback_query.register(core.handlers.grades.grade7.fcu7, F.data.startswith('fcu7'))
    dp.callback_query.register(core.handlers.grades.grade8.fcu8, F.data.startswith('fcu8'))
    #dp.callback_query.register(core.handlers.grades.grade9.fcu9, F.data.startswith('fcu9'))
    #dp.callback_query.register(core.handlers.grades.grade10.fcu10, F.data.startswith('fcu10'))
    #dp.callback_query.register(core.handlers.grades.grade11.fcu11, F.data.startswith('fcu11'))

    @dp.message(lambda m: m.photo)
    async def handle_photo(message: types.Message):
        # –ë–µ—Ä—ë–º file_id —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞)
        file_id = message.photo[-1].file_id

        await message.reply(
            f"üñº File ID —ç—Ç–æ–≥–æ —Ñ–æ—Ç–æ:\n"
            f"<code>{file_id}</code>\n\n"
            f"–†–∞–∑–º–µ—Ä: {message.photo[-1].file_size // 1024} KB",
            parse_mode="HTML"
    )

    #==============================================


    #–∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        bot.session.close()

#–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(start())
